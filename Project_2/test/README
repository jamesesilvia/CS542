This is the test materials folder. All tests are automated, however some user input is required particularly for the last test
case. We used expect for lots of our scripting, which is a tool that waits until the console outputs a specific, known string, and
as a response the script will send a command.

When running an expect script, note that every script ends on an interact command, which lets the tester play around for himself or
use the "quit" command to exit the program. This is the time to review the console output on both the client and server and ensure
that the expected operations happened. Details for test success are located in the comments near the top of each .exp file, and each
script is well documented. Each test case (TC) is named with a unique number and a brief explanation of what the TC does. At times a
script may be reused in a later test case in combination with another script.

Most scripts require that you delete the database before the next script. Pay attention to the prerequisite section in each script
to make sure. For convenience, we have added a .sh file to delete the database from the test directory.

One limitation of our test suite is that the multiclient scripts (just TC7) need to be carried out at once. We proved in the last project
that we can handle 3 clients simultaneously, so now we have been concerned with two clients slamming the server with lots of commands.
TC6 and TC7 scripts can be easily run on two separate clients because they take awhile to execute, but they begin manually. It is a
bit crude, but we suggest that the tester types out the expect command in each putty window before quickly clicking each window and
pressing enter to execute the scripts.

Note that multiclient commands sent at the same time were also tested manually with two clients by quickly pressing Alt+Tab (Windows)
and by multiple people.

TC1 puts some records in the table, gets based on a population that appears 5 times in the data, adds another record with that
population, gets that population again to return 6 records, and then gets each other individual record. TC2 does the same thing
based on string data instead of numerical data. TC3 shows the get command failing safely when there is no data to get. TC4 shows
a series of gets, puts, and removes to make sure you can remove a record when there is only one record as well as when there are
many records with similar data. TC5 shows that the remove command failing safely when there is no data in that key. TC6 shows the
server properly processing a series of 1000 puts followed by a get that returns all 1000 data records. TC7 consists of two clients
running TC6 at one time. TC8 is a regression test that makes sure data still persists in the database after the system is closed
and restarted. It is mostly a manual test, and test steps for it are listed below.

Each TC passed with the exception of TC7. The server may run into a segmentation fault. Less rigorous multiclient operation does
work, however.

If you are experiencing difficulty, feel free to contact us via email and hopefully we can provide some support.

Test steps for TC8:
1.	Delete database.txt
2.	Start server on Putty session
3.	Start client on Putty session
4.	Run TC1PutGetByPop.exp
5.	Close client and server
6.	Start client and server
7.	RunTC8PutGetByPop.exp
