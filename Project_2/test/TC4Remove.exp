#!./expect -f 

#PREREQUISITES AND ASSUMPTIONS:
#all testing is done through putty
#there is already a server started manually in another putty instance
#command to start server is "./server" from the build folder
#server and client are both on the same CCCWORK machine
#Database.txt in build folder is deleted before running test ***REQUIRED***

#SUCCESS CRITERIA:
#server shows commands from client
#client shows failed reads when there is no data, and the appropriate data described below when there is data

#start the client
spawn ./../build/client localhost

#put new data
expect ">" {send "put\r"}
expect "Please enter population of city to store:" {send "9000\r"}
expect "Please enter the name of the city to store:" {send "Attleboro\r"}

#get all data when population is 9000 (expect 1 entry related to this test)
expect ">" {send "get_index_by_population\r"}
expect "Please enter city population to retrieve data with:" {send "9000\r"}

#remove single data entry
expect ">" {send "remove\r"}
expect "Please enter key to remove data with:" {send "0\r"}

#get all data when population is 9000 (expect no entries related to this test, Attleboro is deleted)
expect ">" {send "get_index_by_population\r"}
expect "Please enter city population to retrieve data with:" {send "9000\r"}

expect ">" {send "put\r"}
expect "Please enter population of city to store:" {send "9000\r"}
expect "Please enter the name of the city to store:" {send "Holden\r"}
expect ">" {send "put\r"}
expect "Please enter population of city to store:" {send "9000\r"}
expect "Please enter the name of the city to store:" {send "NYC\r"}
expect ">" {send "put\r"}
expect "Please enter population of city to store:" {send "9000\r"}
expect "Please enter the name of the city to store:" {send "Worcester\r"}
expect ">" {send "put\r"}
expect "Please enter population of city to store:" {send "9000\r"}
expect "Please enter the name of the city to store:" {send "Springfield\r"}
expect ">" {send "put\r"}
expect "Please enter population of city to store:" {send "9000\r"}
expect "Please enter the name of the city to store:" {send "Boston\r"}
expect ">" {send "put\r"}
expect "Please enter population of city to store:" {send "9000\r"}
expect "Please enter the name of the city to store:" {send "Foxboro\r"}
expect ">" {send "put\r"}
expect "Please enter population of city to store:" {send "9000\r"}
expect "Please enter the name of the city to store:" {send "Waltham\r"}
expect ">" {send "put\r"}
expect "Please enter population of city to store:" {send "9000\r"}
expect "Please enter the name of the city to store:" {send "Midwest\r"}
expect ">" {send "put\r"}
expect "Please enter population of city to store:" {send "9000\r"}
expect "Please enter the name of the city to store:" {send "China\r"}

#get all data when population is 9000 (expect 9 entries related to this test)
expect ">" {send "get_index_by_population\r"}
expect "Please enter city population to retrieve data with:" {send "9000\r"}

#remove single data entry
expect ">" {send "remove\r"}
expect "Please enter key to remove data with:" {send "0\r"}

#remove single data entry
expect ">" {send "remove\r"}
expect "Please enter key to remove data with:" {send "2\r"}

#get all data when population is 9000 (expect 7 entries related to this test, with Holden and Worcester deleted)
expect ">" {send "get_index_by_population\r"}
expect "Please enter city population to retrieve data with:" {send "9000\r"}

interact

#Verify that 7 entries remain, and Attleboro, Holden, and Worcester are gone